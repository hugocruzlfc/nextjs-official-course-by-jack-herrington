// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/todos.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface TodosEmpty {}

export interface UpdateTodoRequest {
  id: string;
  completed: boolean;
}

export interface DeleteTodoRequest {
  id: string;
}

export interface TodoList {
  todos: TodoWithID[];
}

export interface Todo {
  title: string;
  priority: string;
  completed: boolean;
}

export interface TodoWithID {
  id: string;
  title: string;
  priority: string;
  completed: boolean;
}

//========================================//
//         Todos Protobuf Client          //
//========================================//

export async function AddTodo(
  todo: Todo,
  config?: ClientConfiguration,
): Promise<TodoWithID> {
  const response = await PBrequest("/Todos/AddTodo", Todo.encode(todo), config);
  return TodoWithID.decode(response);
}

export async function GetTodos(
  todosEmpty: TodosEmpty,
  config?: ClientConfiguration,
): Promise<TodoList> {
  const response = await PBrequest(
    "/Todos/GetTodos",
    TodosEmpty.encode(todosEmpty),
    config,
  );
  return TodoList.decode(response);
}

export async function UpdateTodo(
  updateTodoRequest: UpdateTodoRequest,
  config?: ClientConfiguration,
): Promise<TodoWithID> {
  const response = await PBrequest(
    "/Todos/UpdateTodo",
    UpdateTodoRequest.encode(updateTodoRequest),
    config,
  );
  return TodoWithID.decode(response);
}

export async function DeleteTodo(
  deleteTodoRequest: DeleteTodoRequest,
  config?: ClientConfiguration,
): Promise<TodosEmpty> {
  const response = await PBrequest(
    "/Todos/DeleteTodo",
    DeleteTodoRequest.encode(deleteTodoRequest),
    config,
  );
  return TodosEmpty.decode(response);
}

//========================================//
//           Todos JSON Client            //
//========================================//

export async function AddTodoJSON(
  todo: Todo,
  config?: ClientConfiguration,
): Promise<TodoWithID> {
  const response = await JSONrequest(
    "/Todos/AddTodo",
    TodoJSON.encode(todo),
    config,
  );
  return TodoWithIDJSON.decode(response);
}

export async function GetTodosJSON(
  todosEmpty: TodosEmpty,
  config?: ClientConfiguration,
): Promise<TodoList> {
  const response = await JSONrequest(
    "/Todos/GetTodos",
    TodosEmptyJSON.encode(todosEmpty),
    config,
  );
  return TodoListJSON.decode(response);
}

export async function UpdateTodoJSON(
  updateTodoRequest: UpdateTodoRequest,
  config?: ClientConfiguration,
): Promise<TodoWithID> {
  const response = await JSONrequest(
    "/Todos/UpdateTodo",
    UpdateTodoRequestJSON.encode(updateTodoRequest),
    config,
  );
  return TodoWithIDJSON.decode(response);
}

export async function DeleteTodoJSON(
  deleteTodoRequest: DeleteTodoRequest,
  config?: ClientConfiguration,
): Promise<TodosEmpty> {
  const response = await JSONrequest(
    "/Todos/DeleteTodo",
    DeleteTodoRequestJSON.encode(deleteTodoRequest),
    config,
  );
  return TodosEmptyJSON.decode(response);
}

//========================================//
//                 Todos                  //
//========================================//

export interface Todos<Context = unknown> {
  AddTodo: (todo: Todo, context: Context) => Promise<TodoWithID> | TodoWithID;
  GetTodos: (
    todosEmpty: TodosEmpty,
    context: Context,
  ) => Promise<TodoList> | TodoList;
  UpdateTodo: (
    updateTodoRequest: UpdateTodoRequest,
    context: Context,
  ) => Promise<TodoWithID> | TodoWithID;
  DeleteTodo: (
    deleteTodoRequest: DeleteTodoRequest,
    context: Context,
  ) => Promise<TodosEmpty> | TodosEmpty;
}

export function createTodos<Context>(service: Todos<Context>) {
  return {
    name: "Todos",
    methods: {
      AddTodo: {
        name: "AddTodo",
        handler: service.AddTodo,
        input: { protobuf: Todo, json: TodoJSON },
        output: { protobuf: TodoWithID, json: TodoWithIDJSON },
      },
      GetTodos: {
        name: "GetTodos",
        handler: service.GetTodos,
        input: { protobuf: TodosEmpty, json: TodosEmptyJSON },
        output: { protobuf: TodoList, json: TodoListJSON },
      },
      UpdateTodo: {
        name: "UpdateTodo",
        handler: service.UpdateTodo,
        input: { protobuf: UpdateTodoRequest, json: UpdateTodoRequestJSON },
        output: { protobuf: TodoWithID, json: TodoWithIDJSON },
      },
      DeleteTodo: {
        name: "DeleteTodo",
        handler: service.DeleteTodo,
        input: { protobuf: DeleteTodoRequest, json: DeleteTodoRequestJSON },
        output: { protobuf: TodosEmpty, json: TodosEmptyJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const TodosEmpty = {
  /**
   * Serializes TodosEmpty to protobuf.
   */
  encode: function (_msg?: PartialDeep<TodosEmpty>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes TodosEmpty from protobuf.
   */
  decode: function (_bytes?: ByteSource): TodosEmpty {
    return {};
  },

  /**
   * Initializes TodosEmpty with all fields set to their default value.
   */
  initialize: function (msg?: Partial<TodosEmpty>): TodosEmpty {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<TodosEmpty>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: TodosEmpty,
    _reader: protoscript.BinaryReader,
  ): TodosEmpty {
    return _msg;
  },
};

export const UpdateTodoRequest = {
  /**
   * Serializes UpdateTodoRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateTodoRequest>): Uint8Array {
    return UpdateTodoRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateTodoRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateTodoRequest {
    return UpdateTodoRequest._readMessage(
      UpdateTodoRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateTodoRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateTodoRequest>): UpdateTodoRequest {
    return {
      id: "",
      completed: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateTodoRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.completed) {
      writer.writeBool(4, msg.completed);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateTodoRequest,
    reader: protoscript.BinaryReader,
  ): UpdateTodoRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 4: {
          msg.completed = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteTodoRequest = {
  /**
   * Serializes DeleteTodoRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteTodoRequest>): Uint8Array {
    return DeleteTodoRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteTodoRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteTodoRequest {
    return DeleteTodoRequest._readMessage(
      DeleteTodoRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteTodoRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<DeleteTodoRequest>): DeleteTodoRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteTodoRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteTodoRequest,
    reader: protoscript.BinaryReader,
  ): DeleteTodoRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const TodoList = {
  /**
   * Serializes TodoList to protobuf.
   */
  encode: function (msg: PartialDeep<TodoList>): Uint8Array {
    return TodoList._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes TodoList from protobuf.
   */
  decode: function (bytes: ByteSource): TodoList {
    return TodoList._readMessage(
      TodoList.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes TodoList with all fields set to their default value.
   */
  initialize: function (msg?: Partial<TodoList>): TodoList {
    return {
      todos: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TodoList>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.todos?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.todos as any,
        TodoWithID._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TodoList,
    reader: protoscript.BinaryReader,
  ): TodoList {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = TodoWithID.initialize();
          reader.readMessage(m, TodoWithID._readMessage);
          msg.todos.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Todo = {
  /**
   * Serializes Todo to protobuf.
   */
  encode: function (msg: PartialDeep<Todo>): Uint8Array {
    return Todo._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Todo from protobuf.
   */
  decode: function (bytes: ByteSource): Todo {
    return Todo._readMessage(
      Todo.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Todo with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Todo>): Todo {
    return {
      title: "",
      priority: "",
      completed: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Todo>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.title) {
      writer.writeString(1, msg.title);
    }
    if (msg.priority) {
      writer.writeString(2, msg.priority);
    }
    if (msg.completed) {
      writer.writeBool(3, msg.completed);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Todo, reader: protoscript.BinaryReader): Todo {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.title = reader.readString();
          break;
        }
        case 2: {
          msg.priority = reader.readString();
          break;
        }
        case 3: {
          msg.completed = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const TodoWithID = {
  /**
   * Serializes TodoWithID to protobuf.
   */
  encode: function (msg: PartialDeep<TodoWithID>): Uint8Array {
    return TodoWithID._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes TodoWithID from protobuf.
   */
  decode: function (bytes: ByteSource): TodoWithID {
    return TodoWithID._readMessage(
      TodoWithID.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes TodoWithID with all fields set to their default value.
   */
  initialize: function (msg?: Partial<TodoWithID>): TodoWithID {
    return {
      id: "",
      title: "",
      priority: "",
      completed: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TodoWithID>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.title) {
      writer.writeString(2, msg.title);
    }
    if (msg.priority) {
      writer.writeString(3, msg.priority);
    }
    if (msg.completed) {
      writer.writeBool(4, msg.completed);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TodoWithID,
    reader: protoscript.BinaryReader,
  ): TodoWithID {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.title = reader.readString();
          break;
        }
        case 3: {
          msg.priority = reader.readString();
          break;
        }
        case 4: {
          msg.completed = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const TodosEmptyJSON = {
  /**
   * Serializes TodosEmpty to JSON.
   */
  encode: function (_msg?: PartialDeep<TodosEmpty>): string {
    return "{}";
  },

  /**
   * Deserializes TodosEmpty from JSON.
   */
  decode: function (_json?: string): TodosEmpty {
    return {};
  },

  /**
   * Initializes TodosEmpty with all fields set to their default value.
   */
  initialize: function (msg?: Partial<TodosEmpty>): TodosEmpty {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<TodosEmpty>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: TodosEmpty, _json: any): TodosEmpty {
    return msg;
  },
};

export const UpdateTodoRequestJSON = {
  /**
   * Serializes UpdateTodoRequest to JSON.
   */
  encode: function (msg: PartialDeep<UpdateTodoRequest>): string {
    return JSON.stringify(UpdateTodoRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateTodoRequest from JSON.
   */
  decode: function (json: string): UpdateTodoRequest {
    return UpdateTodoRequestJSON._readMessage(
      UpdateTodoRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateTodoRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateTodoRequest>): UpdateTodoRequest {
    return {
      id: "",
      completed: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateTodoRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.completed) {
      json["completed"] = msg.completed;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateTodoRequest,
    json: any,
  ): UpdateTodoRequest {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _completed_ = json["completed"];
    if (_completed_) {
      msg.completed = _completed_;
    }
    return msg;
  },
};

export const DeleteTodoRequestJSON = {
  /**
   * Serializes DeleteTodoRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteTodoRequest>): string {
    return JSON.stringify(DeleteTodoRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteTodoRequest from JSON.
   */
  decode: function (json: string): DeleteTodoRequest {
    return DeleteTodoRequestJSON._readMessage(
      DeleteTodoRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteTodoRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<DeleteTodoRequest>): DeleteTodoRequest {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteTodoRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteTodoRequest,
    json: any,
  ): DeleteTodoRequest {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const TodoListJSON = {
  /**
   * Serializes TodoList to JSON.
   */
  encode: function (msg: PartialDeep<TodoList>): string {
    return JSON.stringify(TodoListJSON._writeMessage(msg));
  },

  /**
   * Deserializes TodoList from JSON.
   */
  decode: function (json: string): TodoList {
    return TodoListJSON._readMessage(
      TodoListJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes TodoList with all fields set to their default value.
   */
  initialize: function (msg?: Partial<TodoList>): TodoList {
    return {
      todos: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TodoList>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.todos?.length) {
      json["todos"] = msg.todos.map(TodoWithIDJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: TodoList, json: any): TodoList {
    const _todos_ = json["todos"];
    if (_todos_) {
      for (const item of _todos_) {
        const m = TodoWithIDJSON.initialize();
        TodoWithIDJSON._readMessage(m, item);
        msg.todos.push(m);
      }
    }
    return msg;
  },
};

export const TodoJSON = {
  /**
   * Serializes Todo to JSON.
   */
  encode: function (msg: PartialDeep<Todo>): string {
    return JSON.stringify(TodoJSON._writeMessage(msg));
  },

  /**
   * Deserializes Todo from JSON.
   */
  decode: function (json: string): Todo {
    return TodoJSON._readMessage(TodoJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Todo with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Todo>): Todo {
    return {
      title: "",
      priority: "",
      completed: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Todo>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.priority) {
      json["priority"] = msg.priority;
    }
    if (msg.completed) {
      json["completed"] = msg.completed;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Todo, json: any): Todo {
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _priority_ = json["priority"];
    if (_priority_) {
      msg.priority = _priority_;
    }
    const _completed_ = json["completed"];
    if (_completed_) {
      msg.completed = _completed_;
    }
    return msg;
  },
};

export const TodoWithIDJSON = {
  /**
   * Serializes TodoWithID to JSON.
   */
  encode: function (msg: PartialDeep<TodoWithID>): string {
    return JSON.stringify(TodoWithIDJSON._writeMessage(msg));
  },

  /**
   * Deserializes TodoWithID from JSON.
   */
  decode: function (json: string): TodoWithID {
    return TodoWithIDJSON._readMessage(
      TodoWithIDJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes TodoWithID with all fields set to their default value.
   */
  initialize: function (msg?: Partial<TodoWithID>): TodoWithID {
    return {
      id: "",
      title: "",
      priority: "",
      completed: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TodoWithID>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.title) {
      json["title"] = msg.title;
    }
    if (msg.priority) {
      json["priority"] = msg.priority;
    }
    if (msg.completed) {
      json["completed"] = msg.completed;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: TodoWithID, json: any): TodoWithID {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _title_ = json["title"];
    if (_title_) {
      msg.title = _title_;
    }
    const _priority_ = json["priority"];
    if (_priority_) {
      msg.priority = _priority_;
    }
    const _completed_ = json["completed"];
    if (_completed_) {
      msg.completed = _completed_;
    }
    return msg;
  },
};
