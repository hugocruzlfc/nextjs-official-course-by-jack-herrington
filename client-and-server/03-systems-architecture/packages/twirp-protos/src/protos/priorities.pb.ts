// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/priorities.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface PrioritiesEmpty {}

export interface PrioritiesList {
  priorities: string[];
}

//========================================//
//       Priorities Protobuf Client       //
//========================================//

export async function GetPriorities(
  prioritiesEmpty: PrioritiesEmpty,
  config?: ClientConfiguration,
): Promise<PrioritiesList> {
  const response = await PBrequest(
    "/Priorities/GetPriorities",
    PrioritiesEmpty.encode(prioritiesEmpty),
    config,
  );
  return PrioritiesList.decode(response);
}

//========================================//
//         Priorities JSON Client         //
//========================================//

export async function GetPrioritiesJSON(
  prioritiesEmpty: PrioritiesEmpty,
  config?: ClientConfiguration,
): Promise<PrioritiesList> {
  const response = await JSONrequest(
    "/Priorities/GetPriorities",
    PrioritiesEmptyJSON.encode(prioritiesEmpty),
    config,
  );
  return PrioritiesListJSON.decode(response);
}

//========================================//
//               Priorities               //
//========================================//

export interface Priorities<Context = unknown> {
  GetPriorities: (
    prioritiesEmpty: PrioritiesEmpty,
    context: Context,
  ) => Promise<PrioritiesList> | PrioritiesList;
}

export function createPriorities<Context>(service: Priorities<Context>) {
  return {
    name: "Priorities",
    methods: {
      GetPriorities: {
        name: "GetPriorities",
        handler: service.GetPriorities,
        input: { protobuf: PrioritiesEmpty, json: PrioritiesEmptyJSON },
        output: { protobuf: PrioritiesList, json: PrioritiesListJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const PrioritiesEmpty = {
  /**
   * Serializes PrioritiesEmpty to protobuf.
   */
  encode: function (_msg?: PartialDeep<PrioritiesEmpty>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes PrioritiesEmpty from protobuf.
   */
  decode: function (_bytes?: ByteSource): PrioritiesEmpty {
    return {};
  },

  /**
   * Initializes PrioritiesEmpty with all fields set to their default value.
   */
  initialize: function (msg?: Partial<PrioritiesEmpty>): PrioritiesEmpty {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<PrioritiesEmpty>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: PrioritiesEmpty,
    _reader: protoscript.BinaryReader,
  ): PrioritiesEmpty {
    return _msg;
  },
};

export const PrioritiesList = {
  /**
   * Serializes PrioritiesList to protobuf.
   */
  encode: function (msg: PartialDeep<PrioritiesList>): Uint8Array {
    return PrioritiesList._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes PrioritiesList from protobuf.
   */
  decode: function (bytes: ByteSource): PrioritiesList {
    return PrioritiesList._readMessage(
      PrioritiesList.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes PrioritiesList with all fields set to their default value.
   */
  initialize: function (msg?: Partial<PrioritiesList>): PrioritiesList {
    return {
      priorities: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PrioritiesList>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.priorities?.length) {
      writer.writeRepeatedString(1, msg.priorities);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PrioritiesList,
    reader: protoscript.BinaryReader,
  ): PrioritiesList {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.priorities.push(reader.readString());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const PrioritiesEmptyJSON = {
  /**
   * Serializes PrioritiesEmpty to JSON.
   */
  encode: function (_msg?: PartialDeep<PrioritiesEmpty>): string {
    return "{}";
  },

  /**
   * Deserializes PrioritiesEmpty from JSON.
   */
  decode: function (_json?: string): PrioritiesEmpty {
    return {};
  },

  /**
   * Initializes PrioritiesEmpty with all fields set to their default value.
   */
  initialize: function (msg?: Partial<PrioritiesEmpty>): PrioritiesEmpty {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<PrioritiesEmpty>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: PrioritiesEmpty, _json: any): PrioritiesEmpty {
    return msg;
  },
};

export const PrioritiesListJSON = {
  /**
   * Serializes PrioritiesList to JSON.
   */
  encode: function (msg: PartialDeep<PrioritiesList>): string {
    return JSON.stringify(PrioritiesListJSON._writeMessage(msg));
  },

  /**
   * Deserializes PrioritiesList from JSON.
   */
  decode: function (json: string): PrioritiesList {
    return PrioritiesListJSON._readMessage(
      PrioritiesListJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes PrioritiesList with all fields set to their default value.
   */
  initialize: function (msg?: Partial<PrioritiesList>): PrioritiesList {
    return {
      priorities: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<PrioritiesList>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.priorities?.length) {
      json["priorities"] = msg.priorities;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: PrioritiesList, json: any): PrioritiesList {
    const _priorities_ = json["priorities"];
    if (_priorities_) {
      msg.priorities = _priorities_;
    }
    return msg;
  },
};
